# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Mutation {
  incrementCorrectPicks(playerId: ID!, season: String!): Player
  upsertPicks(playerId: ID!, gameId: ID!, teamId: ID!): Pick
  sendPlayerPasswordResetLink(email: String!): SendPlayerPasswordResetLinkResult
  redeemPlayerPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): RedeemPlayerPasswordResetTokenResult
  createInitialPlayer(
    data: CreateInitialPlayerInput!
  ): PlayerAuthenticationWithPasswordSuccess!
  authenticatePlayerWithPassword(
    email: String!
    password: String!
  ): PlayerAuthenticationWithPasswordResult!
  createPlayer(data: PlayerCreateInput!): Player
  createPlayers(data: [PlayerCreateInput!]!): [Player]
  updatePlayer(where: PlayerWhereUniqueInput!, data: PlayerUpdateInput!): Player
  updatePlayers(data: [PlayerUpdateArgs!]!): [Player]
  deletePlayer(where: PlayerWhereUniqueInput!): Player
  deletePlayers(where: [PlayerWhereUniqueInput!]!): [Player]
  createTeam(data: TeamCreateInput!): Team
  createTeams(data: [TeamCreateInput!]!): [Team]
  updateTeam(where: TeamWhereUniqueInput!, data: TeamUpdateInput!): Team
  updateTeams(data: [TeamUpdateArgs!]!): [Team]
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteTeams(where: [TeamWhereUniqueInput!]!): [Team]
  createGame(data: GameCreateInput!): Game
  createGames(data: [GameCreateInput!]!): [Game]
  updateGame(where: GameWhereUniqueInput!, data: GameUpdateInput!): Game
  updateGames(data: [GameUpdateArgs!]!): [Game]
  deleteGame(where: GameWhereUniqueInput!): Game
  deleteGames(where: [GameWhereUniqueInput!]!): [Game]
  createPick(data: PickCreateInput!): Pick
  createPicks(data: [PickCreateInput!]!): [Pick]
  updatePick(where: PickWhereUniqueInput!, data: PickUpdateInput!): Pick
  updatePicks(data: [PickUpdateArgs!]!): [Pick]
  deletePick(where: PickWhereUniqueInput!): Pick
  deletePicks(where: [PickWhereUniqueInput!]!): [Pick]
  createWeek(data: WeekCreateInput!): Week
  createWeeks(data: [WeekCreateInput!]!): [Week]
  updateWeek(where: WeekWhereUniqueInput!, data: WeekUpdateInput!): Week
  updateWeeks(data: [WeekUpdateArgs!]!): [Week]
  deleteWeek(where: WeekWhereUniqueInput!): Week
  deleteWeeks(where: [WeekWhereUniqueInput!]!): [Week]
  endSession: Boolean!
}

type SendPlayerPasswordResetLinkResult {
  code: PasswordResetRequestErrorCode!
  message: String!
}

enum PasswordResetRequestErrorCode {
  IDENTITY_NOT_FOUND
  MULTIPLE_IDENTITY_MATCHES
}

type ValidatePlayerPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type RedeemPlayerPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  MULTIPLE_IDENTITY_MATCHES
  TOKEN_NOT_SET
  TOKEN_MISMATCH
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

input CreateInitialPlayerInput {
  name: String
  email: String
  password: String
}

union AuthenticatedItem = Player

union PlayerAuthenticationWithPasswordResult =
    PlayerAuthenticationWithPasswordSuccess
  | PlayerAuthenticationWithPasswordFailure

type PlayerAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: Player!
}

type PlayerAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

type Player {
  id: ID!
  name: String
  email: String
  password: PasswordState
  picks(
    where: PickWhereInput! = {}
    orderBy: [PickOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Pick!]
  picksCount(where: PickWhereInput! = {}): Int
  passwordResetToken: PasswordState
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
}

type PasswordState {
  isSet: Boolean!
}

input PlayerWhereUniqueInput {
  id: ID
  email: String
}

input PlayerWhereInput {
  AND: [PlayerWhereInput!]
  OR: [PlayerWhereInput!]
  NOT: [PlayerWhereInput!]
  id: IDFilter
  email: StringNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input PlayerOrderByInput {
  id: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input PlayerUpdateInput {
  name: String
  email: String
  password: String
  picks: PickRelateToManyForUpdateInput
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
}

input PickRelateToManyForUpdateInput {
  disconnect: [PickWhereUniqueInput!]
  set: [PickWhereUniqueInput!]
  create: [PickCreateInput!]
  connect: [PickWhereUniqueInput!]
}

input PlayerUpdateArgs {
  where: PlayerWhereUniqueInput!
  data: PlayerUpdateInput!
}

input PlayerCreateInput {
  name: String
  email: String
  password: String
  picks: PickRelateToManyForCreateInput
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
}

input PickRelateToManyForCreateInput {
  create: [PickCreateInput!]
  connect: [PickWhereUniqueInput!]
}

type Team {
  id: ID!
  name: String
  city: String
  abbreviation: String
  conference: String
  division: String
}

input TeamWhereUniqueInput {
  id: ID
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
  id: IDFilter
}

input TeamOrderByInput {
  id: OrderDirection
}

input TeamUpdateInput {
  name: String
  city: String
  abbreviation: String
  conference: String
  division: String
}

input TeamUpdateArgs {
  where: TeamWhereUniqueInput!
  data: TeamUpdateInput!
}

input TeamCreateInput {
  name: String
  city: String
  abbreviation: String
  conference: String
  division: String
}

type Game {
  id: ID!
  season: String
  slug: String
  week: Week
  spread: Float
  homeTeam: Team
  awayTeam: Team
  winner: Team
  picks(
    where: PickWhereInput! = {}
    orderBy: [PickOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Pick!]
  picksCount(where: PickWhereInput! = {}): Int
}

input GameWhereUniqueInput {
  id: ID
}

input GameWhereInput {
  AND: [GameWhereInput!]
  OR: [GameWhereInput!]
  NOT: [GameWhereInput!]
  id: IDFilter
}

input GameOrderByInput {
  id: OrderDirection
}

input GameUpdateInput {
  season: String
  slug: String
  week: WeekRelateToOneForUpdateInput
  spread: Float
  homeTeam: TeamRelateToOneForUpdateInput
  awayTeam: TeamRelateToOneForUpdateInput
  winner: TeamRelateToOneForUpdateInput
  picks: PickRelateToManyForUpdateInput
}

input WeekRelateToOneForUpdateInput {
  create: WeekCreateInput
  connect: WeekWhereUniqueInput
  disconnect: Boolean
}

input TeamRelateToOneForUpdateInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
  disconnect: Boolean
}

input GameUpdateArgs {
  where: GameWhereUniqueInput!
  data: GameUpdateInput!
}

input GameCreateInput {
  season: String
  slug: String
  week: WeekRelateToOneForCreateInput
  spread: Float
  homeTeam: TeamRelateToOneForCreateInput
  awayTeam: TeamRelateToOneForCreateInput
  winner: TeamRelateToOneForCreateInput
  picks: PickRelateToManyForCreateInput
}

input WeekRelateToOneForCreateInput {
  create: WeekCreateInput
  connect: WeekWhereUniqueInput
}

input TeamRelateToOneForCreateInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
}

type Pick {
  id: ID!
  player: Player
  game: Game
  picked: Team
  isCorrect: Boolean
}

input PickWhereUniqueInput {
  id: ID
}

input PickWhereInput {
  AND: [PickWhereInput!]
  OR: [PickWhereInput!]
  NOT: [PickWhereInput!]
  id: IDFilter
}

input PickOrderByInput {
  id: OrderDirection
}

input PickUpdateInput {
  player: PlayerRelateToOneForUpdateInput
  game: GameRelateToOneForUpdateInput
  picked: TeamRelateToOneForUpdateInput
  isCorrect: Boolean
}

input PlayerRelateToOneForUpdateInput {
  create: PlayerCreateInput
  connect: PlayerWhereUniqueInput
  disconnect: Boolean
}

input GameRelateToOneForUpdateInput {
  create: GameCreateInput
  connect: GameWhereUniqueInput
  disconnect: Boolean
}

input PickUpdateArgs {
  where: PickWhereUniqueInput!
  data: PickUpdateInput!
}

input PickCreateInput {
  player: PlayerRelateToOneForCreateInput
  game: GameRelateToOneForCreateInput
  picked: TeamRelateToOneForCreateInput
  isCorrect: Boolean
}

input PlayerRelateToOneForCreateInput {
  create: PlayerCreateInput
  connect: PlayerWhereUniqueInput
}

input GameRelateToOneForCreateInput {
  create: GameCreateInput
  connect: GameWhereUniqueInput
}

type Week {
  id: ID!
  label: String
  slug: String
  season: String
  games(
    where: GameWhereInput! = {}
    orderBy: [GameOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Game!]
  gamesCount(where: GameWhereInput! = {}): Int
}

input WeekWhereUniqueInput {
  id: ID
}

input WeekWhereInput {
  AND: [WeekWhereInput!]
  OR: [WeekWhereInput!]
  NOT: [WeekWhereInput!]
  id: IDFilter
}

input WeekOrderByInput {
  id: OrderDirection
}

input WeekUpdateInput {
  label: String
  slug: String
  season: String
  games: GameRelateToManyForUpdateInput
}

input GameRelateToManyForUpdateInput {
  disconnect: [GameWhereUniqueInput!]
  set: [GameWhereUniqueInput!]
  create: [GameCreateInput!]
  connect: [GameWhereUniqueInput!]
}

input WeekUpdateArgs {
  where: WeekWhereUniqueInput!
  data: WeekUpdateInput!
}

input WeekCreateInput {
  label: String
  slug: String
  season: String
  games: GameRelateToManyForCreateInput
}

input GameRelateToManyForCreateInput {
  create: [GameCreateInput!]
  connect: [GameWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Query {
  validatePlayerPasswordResetToken(
    email: String!
    token: String!
  ): ValidatePlayerPasswordResetTokenResult
  authenticatedItem: AuthenticatedItem
  players(
    where: PlayerWhereInput! = {}
    orderBy: [PlayerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Player!]
  player(where: PlayerWhereUniqueInput!): Player
  playersCount(where: PlayerWhereInput! = {}): Int
  teams(
    where: TeamWhereInput! = {}
    orderBy: [TeamOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Team!]
  team(where: TeamWhereUniqueInput!): Team
  teamsCount(where: TeamWhereInput! = {}): Int
  games(
    where: GameWhereInput! = {}
    orderBy: [GameOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Game!]
  game(where: GameWhereUniqueInput!): Game
  gamesCount(where: GameWhereInput! = {}): Int
  picks(
    where: PickWhereInput! = {}
    orderBy: [PickOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Pick!]
  pick(where: PickWhereUniqueInput!): Pick
  picksCount(where: PickWhereInput! = {}): Int
  weeks(
    where: WeekWhereInput! = {}
    orderBy: [WeekOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Week!]
  week(where: WeekWhereUniqueInput!): Week
  weeksCount(where: WeekWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
