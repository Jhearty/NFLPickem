input PickRelateToManyInput {
  create: [PickCreateInput]
  connect: [PickWhereUniqueInput]
  disconnect: [PickWhereUniqueInput]
  disconnectAll: Boolean
}

""" A keystone list """
type Player {
  id: ID!
  name: String
  email: String
  password_is_set: Boolean
  picks(where: PickWhereInput, search: String, sortBy: [SortPicksBy!], orderBy: String, first: Int, skip: Int): [Pick!]!
  _picksMeta(where: PickWhereInput, search: String, sortBy: [SortPicksBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
}

input PlayerWhereInput {
  AND: [PlayerWhereInput]
  OR: [PlayerWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean

  """ condition must be true for all nodes """
  picks_every: PickWhereInput

  """ condition must be true for at least 1 node """
  picks_some: PickWhereInput

  """ condition must be false for all nodes """
  picks_none: PickWhereInput
}

input PlayerWhereUniqueInput {
  id: ID!
}

enum SortPlayersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  picks_ASC
  picks_DESC
}

input PlayerUpdateInput {
  name: String
  email: String
  password: String
  picks: PickRelateToManyInput
}

input PlayersUpdateInput {
  id: ID!
  data: PlayerUpdateInput
}

input PlayerCreateInput {
  name: String
  email: String
  password: String
  picks: PickRelateToManyInput
}

input PlayersCreateInput {
  data: PlayerCreateInput
}

""" A keystone list """
type Team {
  id: ID!
  name: String
  city: String
  abbreviation: String
  conference: String
  division: String
}

input TeamWhereInput {
  AND: [TeamWhereInput]
  OR: [TeamWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  city: String
  city_not: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  city_i: String
  city_not_i: String
  city_contains_i: String
  city_not_contains_i: String
  city_starts_with_i: String
  city_not_starts_with_i: String
  city_ends_with_i: String
  city_not_ends_with_i: String
  city_in: [String]
  city_not_in: [String]
  abbreviation: String
  abbreviation_not: String
  abbreviation_contains: String
  abbreviation_not_contains: String
  abbreviation_starts_with: String
  abbreviation_not_starts_with: String
  abbreviation_ends_with: String
  abbreviation_not_ends_with: String
  abbreviation_i: String
  abbreviation_not_i: String
  abbreviation_contains_i: String
  abbreviation_not_contains_i: String
  abbreviation_starts_with_i: String
  abbreviation_not_starts_with_i: String
  abbreviation_ends_with_i: String
  abbreviation_not_ends_with_i: String
  abbreviation_in: [String]
  abbreviation_not_in: [String]
  conference: String
  conference_not: String
  conference_contains: String
  conference_not_contains: String
  conference_starts_with: String
  conference_not_starts_with: String
  conference_ends_with: String
  conference_not_ends_with: String
  conference_i: String
  conference_not_i: String
  conference_contains_i: String
  conference_not_contains_i: String
  conference_starts_with_i: String
  conference_not_starts_with_i: String
  conference_ends_with_i: String
  conference_not_ends_with_i: String
  conference_in: [String]
  conference_not_in: [String]
  division: String
  division_not: String
  division_contains: String
  division_not_contains: String
  division_starts_with: String
  division_not_starts_with: String
  division_ends_with: String
  division_not_ends_with: String
  division_i: String
  division_not_i: String
  division_contains_i: String
  division_not_contains_i: String
  division_starts_with_i: String
  division_not_starts_with_i: String
  division_ends_with_i: String
  division_not_ends_with_i: String
  division_in: [String]
  division_not_in: [String]
}

input TeamWhereUniqueInput {
  id: ID!
}

enum SortTeamsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  city_ASC
  city_DESC
  abbreviation_ASC
  abbreviation_DESC
  conference_ASC
  conference_DESC
  division_ASC
  division_DESC
}

input TeamUpdateInput {
  name: String
  city: String
  abbreviation: String
  conference: String
  division: String
}

input TeamsUpdateInput {
  id: ID!
  data: TeamUpdateInput
}

input TeamCreateInput {
  name: String
  city: String
  abbreviation: String
  conference: String
  division: String
}

input TeamsCreateInput {
  data: TeamCreateInput
}

input TeamRelateToOneInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
  disconnect: TeamWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type Game {
  id: ID!
  season: String
  week: Int
  spread: Float
  homeTeam: Team
  awayTeam: Team
  winner: Team
  picks(where: PickWhereInput, search: String, sortBy: [SortPicksBy!], orderBy: String, first: Int, skip: Int): [Pick!]!
  _picksMeta(where: PickWhereInput, search: String, sortBy: [SortPicksBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
}

input GameWhereInput {
  AND: [GameWhereInput]
  OR: [GameWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  season: String
  season_not: String
  season_contains: String
  season_not_contains: String
  season_starts_with: String
  season_not_starts_with: String
  season_ends_with: String
  season_not_ends_with: String
  season_i: String
  season_not_i: String
  season_contains_i: String
  season_not_contains_i: String
  season_starts_with_i: String
  season_not_starts_with_i: String
  season_ends_with_i: String
  season_not_ends_with_i: String
  season_in: [String]
  season_not_in: [String]
  week: Int
  week_not: Int
  week_lt: Int
  week_lte: Int
  week_gt: Int
  week_gte: Int
  week_in: [Int]
  week_not_in: [Int]
  spread: Float
  spread_not: Float
  spread_lt: Float
  spread_lte: Float
  spread_gt: Float
  spread_gte: Float
  spread_in: [Float]
  spread_not_in: [Float]
  homeTeam: TeamWhereInput
  homeTeam_is_null: Boolean
  awayTeam: TeamWhereInput
  awayTeam_is_null: Boolean
  winner: TeamWhereInput
  winner_is_null: Boolean

  """ condition must be true for all nodes """
  picks_every: PickWhereInput

  """ condition must be true for at least 1 node """
  picks_some: PickWhereInput

  """ condition must be false for all nodes """
  picks_none: PickWhereInput
}

input GameWhereUniqueInput {
  id: ID!
}

enum SortGamesBy {
  id_ASC
  id_DESC
  season_ASC
  season_DESC
  week_ASC
  week_DESC
  spread_ASC
  spread_DESC
  homeTeam_ASC
  homeTeam_DESC
  awayTeam_ASC
  awayTeam_DESC
  winner_ASC
  winner_DESC
  picks_ASC
  picks_DESC
}

input GameUpdateInput {
  season: String
  week: Int
  spread: Float
  homeTeam: TeamRelateToOneInput
  awayTeam: TeamRelateToOneInput
  winner: TeamRelateToOneInput
  picks: PickRelateToManyInput
}

input GamesUpdateInput {
  id: ID!
  data: GameUpdateInput
}

input GameCreateInput {
  season: String
  week: Int
  spread: Float
  homeTeam: TeamRelateToOneInput
  awayTeam: TeamRelateToOneInput
  winner: TeamRelateToOneInput
  picks: PickRelateToManyInput
}

input GamesCreateInput {
  data: GameCreateInput
}

input PlayerRelateToOneInput {
  create: PlayerCreateInput
  connect: PlayerWhereUniqueInput
  disconnect: PlayerWhereUniqueInput
  disconnectAll: Boolean
}

input GameRelateToOneInput {
  create: GameCreateInput
  connect: GameWhereUniqueInput
  disconnect: GameWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type Pick {
  id: ID!
  player: Player
  game: Game
  picked: Team
  isCorrect: Boolean
}

input PickWhereInput {
  AND: [PickWhereInput]
  OR: [PickWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  player: PlayerWhereInput
  player_is_null: Boolean
  game: GameWhereInput
  game_is_null: Boolean
  picked: TeamWhereInput
  picked_is_null: Boolean
  isCorrect: Boolean
  isCorrect_not: Boolean
}

input PickWhereUniqueInput {
  id: ID!
}

enum SortPicksBy {
  id_ASC
  id_DESC
  player_ASC
  player_DESC
  game_ASC
  game_DESC
  picked_ASC
  picked_DESC
  isCorrect_ASC
  isCorrect_DESC
}

input PickUpdateInput {
  player: PlayerRelateToOneInput
  game: GameRelateToOneInput
  picked: TeamRelateToOneInput
  isCorrect: Boolean
}

input PicksUpdateInput {
  id: ID!
  data: PickUpdateInput
}

input PickCreateInput {
  player: PlayerRelateToOneInput
  game: GameRelateToOneInput
  picked: TeamRelateToOneInput
  isCorrect: Boolean
}

input PicksCreateInput {
  data: PickCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type _ListAccess {
  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'create' operations.
  NOTE: 'create' can only return a Boolean.
  It is not possible to specify a declarative Where clause for this
  operation
  """
  create: Boolean

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'read' operations.
  """
  read: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'update' operations.
  """
  update: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'delete' operations.
  """
  delete: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'auth' operations.
  """
  auth: JSON
}

type _ListQueries {
  """Single-item query name"""
  item: String

  """All-items query name"""
  list: String

  """List metadata query name"""
  meta: String
}

type _ListMutations {
  """Create mutation name"""
  create: String

  """Create many mutation name"""
  createMany: String

  """Update mutation name"""
  update: String

  """Update many mutation name"""
  updateMany: String

  """Delete mutation name"""
  delete: String

  """Delete many mutation name"""
  deleteMany: String
}

type _ListInputTypes {
  """Input type for matching multiple items"""
  whereInput: String

  """Input type for matching a unique item"""
  whereUniqueInput: String

  """Create mutation input type name"""
  createInput: String

  """Create many mutation input type name"""
  createManyInput: String

  """Update mutation name input"""
  updateInput: String

  """Update many mutation name input"""
  updateManyInput: String
}

type _ListSchemaFields {
  """The path of the field in its list"""
  path: String

  """The name of the field in its list"""
  name: String @deprecated(reason: "Use `path` instead")

  """The field type (ie, Checkbox, Text, etc)"""
  type: String
}

type _ListSchemaRelatedFields {
  """The typename as used in GraphQL queries"""
  type: String

  """A list of GraphQL field names"""
  fields: [String]
}

type _ListSchema {
  """The typename as used in GraphQL queries"""
  type: String

  """
  Top level GraphQL query names which either return this type, or
  provide aggregate information about this type
  """
  queries: _ListQueries

  """Top-level GraphQL mutation names"""
  mutations: _ListMutations

  """Top-level GraphQL input types"""
  inputTypes: _ListInputTypes

  """Information about fields defined on this list"""
  fields(where: _ListSchemaFieldsInput): [_ListSchemaFields]

  """
  Information about fields on other types which return this type, or
  provide aggregate information about this type
  """
  relatedFields: [_ListSchemaRelatedFields]
}

type _ListMeta {
  """The Keystone list key"""
  key: String

  """The Keystone List name"""
  name: String @deprecated(reason: "Use `key` instead")

  """The list's user-facing description"""
  description: String

  """The list's display name in the Admin UI"""
  label: String

  """The list's singular display name"""
  singular: String

  """The list's plural display name"""
  plural: String

  """The list's data path"""
  path: String

  """Access control configuration for the currently authenticated request"""
  access: _ListAccess

  """Information on the generated GraphQL schema"""
  schema: _ListSchema
}

type _QueryMeta {
  count: Int
}

input _ksListsMetaInput {
  key: String

  """Whether this is an auxiliary helper list"""
  auxiliary: Boolean
}

input _ListSchemaFieldsInput {
  type: String
}

type Mutation {
  """ Create a single Player item. """
  createPlayer(data: PlayerCreateInput): Player

  """ Create multiple Player items. """
  createPlayers(data: [PlayersCreateInput]): [Player]

  """ Update a single Player item by ID. """
  updatePlayer(id: ID!, data: PlayerUpdateInput): Player

  """ Update multiple Player items by ID. """
  updatePlayers(data: [PlayersUpdateInput]): [Player]

  """ Delete a single Player item by ID. """
  deletePlayer(id: ID!): Player

  """ Delete multiple Player items by ID. """
  deletePlayers(ids: [ID!]): [Player]

  """ Create a single Team item. """
  createTeam(data: TeamCreateInput): Team

  """ Create multiple Team items. """
  createTeams(data: [TeamsCreateInput]): [Team]

  """ Update a single Team item by ID. """
  updateTeam(id: ID!, data: TeamUpdateInput): Team

  """ Update multiple Team items by ID. """
  updateTeams(data: [TeamsUpdateInput]): [Team]

  """ Delete a single Team item by ID. """
  deleteTeam(id: ID!): Team

  """ Delete multiple Team items by ID. """
  deleteTeams(ids: [ID!]): [Team]

  """ Create a single Game item. """
  createGame(data: GameCreateInput): Game

  """ Create multiple Game items. """
  createGames(data: [GamesCreateInput]): [Game]

  """ Update a single Game item by ID. """
  updateGame(id: ID!, data: GameUpdateInput): Game

  """ Update multiple Game items by ID. """
  updateGames(data: [GamesUpdateInput]): [Game]

  """ Delete a single Game item by ID. """
  deleteGame(id: ID!): Game

  """ Delete multiple Game items by ID. """
  deleteGames(ids: [ID!]): [Game]

  """ Create a single Pick item. """
  createPick(data: PickCreateInput): Pick

  """ Create multiple Pick items. """
  createPicks(data: [PicksCreateInput]): [Pick]

  """ Update a single Pick item by ID. """
  updatePick(id: ID!, data: PickUpdateInput): Pick

  """ Update multiple Pick items by ID. """
  updatePicks(data: [PicksUpdateInput]): [Pick]

  """ Delete a single Pick item by ID. """
  deletePick(id: ID!): Pick

  """ Delete multiple Pick items by ID. """
  deletePicks(ids: [ID!]): [Pick]
  authenticatePlayerWithPassword(email: String!, password: String!): PlayerAuthenticationWithPasswordResult!
  createInitialPlayer(data: CreateInitialPlayerInput!): PlayerAuthenticationWithPasswordSuccess!
  incrementCorrectPicks(playerId: ID!, season: String!): Player
  endSession: Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

union AuthenticatedItem = Player

union PlayerAuthenticationWithPasswordResult = PlayerAuthenticationWithPasswordSuccess | PlayerAuthenticationWithPasswordFailure

type PlayerAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: Player!
}

type PlayerAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialPlayerInput {
  name: String
  email: String
  password: String
}

type Query {
  """ Search for all Player items which match the where clause. """
  allPlayers(where: PlayerWhereInput, search: String, sortBy: [SortPlayersBy!], orderBy: String, first: Int, skip: Int): [Player]

  """ Search for the Player item with the matching ID. """
  Player(where: PlayerWhereUniqueInput!): Player

  """ Perform a meta-query on all Player items which match the where clause. 
  """
  _allPlayersMeta(where: PlayerWhereInput, search: String, sortBy: [SortPlayersBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Player list. """
  _PlayersMeta: _ListMeta

  """ Search for all Team items which match the where clause. """
  allTeams(where: TeamWhereInput, search: String, sortBy: [SortTeamsBy!], orderBy: String, first: Int, skip: Int): [Team]

  """ Search for the Team item with the matching ID. """
  Team(where: TeamWhereUniqueInput!): Team

  """ Perform a meta-query on all Team items which match the where clause. """
  _allTeamsMeta(where: TeamWhereInput, search: String, sortBy: [SortTeamsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Team list. """
  _TeamsMeta: _ListMeta

  """ Search for all Game items which match the where clause. """
  allGames(where: GameWhereInput, search: String, sortBy: [SortGamesBy!], orderBy: String, first: Int, skip: Int): [Game]

  """ Search for the Game item with the matching ID. """
  Game(where: GameWhereUniqueInput!): Game

  """ Perform a meta-query on all Game items which match the where clause. """
  _allGamesMeta(where: GameWhereInput, search: String, sortBy: [SortGamesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Game list. """
  _GamesMeta: _ListMeta

  """ Search for all Pick items which match the where clause. """
  allPicks(where: PickWhereInput, search: String, sortBy: [SortPicksBy!], orderBy: String, first: Int, skip: Int): [Pick]

  """ Search for the Pick item with the matching ID. """
  Pick(where: PickWhereUniqueInput!): Pick

  """ Perform a meta-query on all Pick items which match the where clause. """
  _allPicksMeta(where: PickWhereInput, search: String, sortBy: [SortPicksBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Pick list. """
  _PicksMeta: _ListMeta

  """ Retrieve the meta-data for all lists. """
  _ksListsMeta(where: _ksListsMetaInput): [_ListMeta]
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
